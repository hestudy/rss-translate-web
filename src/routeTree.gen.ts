/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AuthImport } from './routes/_auth';

// Create Virtual Routes

const AuthIndexLazyImport = createFileRoute('/_auth/')();
const AuthAboutLazyImport = createFileRoute('/_auth/about')();

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/index.lazy').then((d) => d.Route));

const AuthAboutLazyRoute = AuthAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/about.lazy').then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/about': {
      id: '/_auth/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AuthAboutLazyImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/': {
      id: '/_auth/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AuthIndexLazyImport;
      parentRoute: typeof AuthImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAboutLazyRoute: typeof AuthAboutLazyRoute;
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAboutLazyRoute: AuthAboutLazyRoute,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren;
  '/about': typeof AuthAboutLazyRoute;
  '/': typeof AuthIndexLazyRoute;
}

export interface FileRoutesByTo {
  '/about': typeof AuthAboutLazyRoute;
  '/': typeof AuthIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/_auth/about': typeof AuthAboutLazyRoute;
  '/_auth/': typeof AuthIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '' | '/about' | '/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/about' | '/';
  id: '__root__' | '/_auth' | '/_auth/about' | '/_auth/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/about",
        "/_auth/"
      ]
    },
    "/_auth/about": {
      "filePath": "_auth/about.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
